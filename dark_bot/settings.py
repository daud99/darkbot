"""
Django settings for dark_bot project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
from accounts.script import sendmail
import os
import logging.config
from django.utils.log import DEFAULT_LOGGING

# Logging settings

# Disable Django's logging setup
LOGGING_CONFIG = None
#
LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()
#
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
            'datefmt': '%d-%b-%y %H:%M:%S',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        # console logs to stderr
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/darkbot.log',
            'formatter': 'default',
            'when': 'midnight',
            'interval': 1,
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # # default for all undefined Python modules
        # '': {
        #     'level': 'WARNING',
        #     'handlers': ['console'],
        # },
        # Our application code
        '': {
            'level': LOGLEVEL,
            'handlers': ['file'],
            # Avoid double logging because of root logger
            'propagate': False,
        },
        # Prevent noisy modules from logging to Sentry
        'noisy_module': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        # Default runserver request logging
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    },
})

# Celery settings

CELERY_BROKER_URL = 'amqp://localhost//'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json']
# CELERY_RESULT_BACKEND = 'db+sqlite:///results.sqlite'
CELERY_TASK_SERIALIZER = 'json'


# setting for send_mail
EMAIL_USE_TLS = sendmail.EMAIL_USE_TLS
EMAIL_HOST = sendmail.EMAIL_HOST
EMAIL_HOST_USER = sendmail.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = sendmail.EMAIL_HOST_PASSWORD
EMAIL_PORT = sendmail.EMAIL_PORT

# setting for leak check api
LEAK_CHECK_KEY = '2a158c46accb55127856b57ea2b854dc342a0e04'
LEAK_CHECK_URL = 'https://leakcheck.net/api/'

# setting for hibp API
HIBP_KEY = "38070fc10008423faaaac8da0bb40d28"
HIBP_USER_AGENT = "tranchulas"

# setting for we leak info api

WE_LEAK_KEY = '7635bf59b71570492ace2fb104259dff99d6bed6'
WE_LEAK_URL = 'https://api.weleakinfo.com/v3/search'


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR = os.path.join(BASE_DIR, "templates")


#overwriting the djangodefault usermodel
AUTH_USER_MODEL = 'accounts.User'



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q*%r*kevzyp_s)36=ec2)2n&y8dv+745z1i+j5z!1h@s#)^!nm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gatherdumps',
    'search',
    'accounts',
    'userdashboard',
    'crispy_forms',
    'adminpanel',
    'django_cool_paginator',
    'rest_framework.authtoken',
    'fileparser'
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 500,
}


CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    "csp.middleware.CSPMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'dark_bot.ip_restriction.IpWhitelister',
    'dark_bot.ip_restriction.QueryMiddleware'
]

# ==============================================================================
# ENABLING SECURITY HEADERS
# ==============================================================================

SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_SECONDS = 2592000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'same-origin'
CSP_STYLE_SRC = ["'self'", "www.w3.org", "tranchulas.com", "www.altfonts.com","purl.org","creativecommons.org", "fonts.googleapis.com", "code.jquery.com", "maxcdn.bootstrapcdn.com", "cdnjs.cloudflare.com"]


# Other

ROOT_URLCONF = 'dark_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dark_bot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'USER': 'darkbot',
        'PASSWORD': 'darkbot',
        'NAME': 'darkbot',
        'HOST': 'localhost',
    },
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

STATICFILES_DIRS=[
    os.path.join(BASE_DIR, "static"),
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')

# messages setting

from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

LOGIN_REDIRECT_URL = '/adminpanel'
#
#
# try:
#     from .local_settings import *
# except ImportError:
#     pass
#
# try:
#     from .local_settings import *
# except ImportError:
#     pass
